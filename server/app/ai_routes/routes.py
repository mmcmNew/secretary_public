import json

from flask import current_app

from werkzeug.datastructures import FileStorage
from io import BytesIO
import base64
from datetime import datetime

import requests
from flask import request, jsonify
from . import ai_routes
from ..utilites import save_to_base_modules, get_columns_names

from ..get_records_utils import get_records_by_ids
from app.block_notes_utiltes import build_blocks_from_records


@ai_routes.route('/ai_record_fix', methods=['POST'])
def ai_record_fix_route():
    data = request.get_json()
    record = data.get("record", "")
    table_name = data.get("table_name")
    query_type = data.get("type", "fix")
    # current_app.logger.info(f"AI record fix route: {data}")

    if not table_name:
        return jsonify({'error': 'Missing table_name'}), 400

    # records = get_records_by_ids(table_name, records_ids)

    if not record:
        return jsonify({'error': 'Record not found'}), 404

    prompt_header = {
        "fix": "–≠—Ç–æ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã. –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –∏ —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º. "
               "–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–∏–µ —Ç–æ —Ñ–∞–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–Ω–∞–µ—à—å –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–∏, –Ω–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π, "
               "–∞ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω. –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º –≤ md "
               "—Ç–µ–∫—Å—Ç–æ–º —Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é",
        "summarize": "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –∑–∞–ø–∏—Å–µ–π.",
        "tag": "–î–æ–±–∞–≤—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.",
    }

    prompt = prompt_header.get(query_type, prompt_header["fix"])
    final_prompt = f"{prompt}\n–í–æ—Ç –∑–∞–ø–∏—Å—å:\n{record}"

    # current_app.logger.info(final_prompt)
    ai_response = requests.post(
        "https://n8n.ndomen.online/webhook/4999da23-b30e-494b-9435-9948be5ab8d4",
        json={"user_message": final_prompt}
    )

    if ai_response.status_code != 200:
        # current_app.logger.error(f"AI webhook error: {ai_response.text}")
        return jsonify({'error': 'AI webhook error'}), 500

    try:
        ai_json = ai_response.json()
        content = ai_json[0]['message']['content']
        # current_app.logger.info(f"AI parsed result: {content}")
        current_app.logger.info(f"AI WebHook answer success")
        return jsonify(result=content), 200
    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI –æ—Ç–≤–µ—Ç–∞: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI –æ—Ç–≤–µ—Ç–∞'}), 500


@ai_routes.route('/ai_post_generate', methods=['POST'])
def ai_post_generate_route():
    data = request.get_json()
    records_ids = data.get("records_ids", [])
    table_name = data.get("table_name")
    query_type = data.get("type", "fix")

    if not records_ids or not table_name:
        return jsonify({'error': 'Missing record_ids or table_name'}), 400

    records = get_records_by_ids(table_name, records_ids)

    if not records:
        return jsonify({'error': 'Records not found'}), 404

    prompt_header = {
        "post": "–≠—Ç–æ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å—Ç –¥–ª—è Telegram. –ù—É–∂–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∏"
                "–ø–æ –∫–∞–∫–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å. –í –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—à–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ MD. –í –Ω–∞—á–∞–ª–µ –ø–æ—Å—Ç–∞ –¥–æ–±–∞–≤–ª—è–π"
                "–¥–∞—Ç—ã —á—Ç–æ–± –±—ã–ª –ø–æ–Ω—è—Ç–µ–Ω –ø–µ—Ä–∏–æ–¥ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∏ –≤–∑—è—Ç—ã –∑–∞–ø–∏—Å–∏. –î–æ–±–∞–≤–ª—è–π –≤ —Ö–µ—à—Ç–µ–≥–∏"
                "–Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —ç—Ç–∞–ø–∞. –ü–æ—Å—Ç—ã –Ω–∞—á–∏–Ω–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∞. "
                "–ù–∞–ø—Ä–∏–º–µ—Ä üìÖ **–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: 22.04.2024 ‚Äî 29.04.2024**",
    }

    prompt = prompt_header.get(query_type, prompt_header["post"])
    final_prompt = f"{prompt}\n–í–æ—Ç –∑–∞–ø–∏—Å–∏:\n{records}"

    # current_app.logger.info(final_prompt)
    ai_response = requests.post(
        "https://n8n.ndomen.online/webhook/4999da23-b30e-494b-9435-9948be5ab8d4",
        json={"user_message": final_prompt}
    )

    if ai_response.status_code != 200:
        current_app.logger.error(f"AI webhook error: {ai_response.text}")
        return jsonify({'error': 'AI webhook error'}), 500

    try:
        ai_json = ai_response.json()
        content = ai_json[0]['message']['content']
        # current_app.logger.info(f"AI parsed result: {content}")
        record_info = {"body":  content.replace('```markdown', '').replace('```', '').replace('###', ''),
                       "records_ids": json.dumps(records_ids)}
        result = save_to_base_modules('posts_journal', 'create', record_info)
        if result.get('error'):
            return jsonify({'error': result.get('error')}), 500
            current_app.logger.info(f"AI WebHook answer success")
        return jsonify(result='success'), 200
    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI –æ—Ç–≤–µ—Ç–∞: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI –æ—Ç–≤–µ—Ç–∞'}), 500


def convert_b64_to_filestorage(b64_data: str, filename: str, content_type: str = "image/jpeg") -> FileStorage:
    file_data = base64.b64decode(b64_data)
    return FileStorage(stream=BytesIO(file_data), filename=filename, content_type=content_type)


@ai_routes.route('/generate-image', methods=['POST'])
def generate_image():
    data = request.get_json()
    text = data.get("text")
    table_name = data.get("table_name")
    record_id = data.get("record_id")
    columns_names = get_columns_names()
    if not text:
        return jsonify(success=False, message="–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –≤–µ–±—Ö—É–∫
    webhook_url = "https://n8n.ndomen.online/webhook/2da3e25d-1ff6-41f9-94e8-d55d43c1247b"
    try:
        webhook_resp = requests.post(webhook_url, json={"text": text})
        webhook_resp.raise_for_status()
        b64_string = webhook_resp.json()["data"][0]["b64_json"]
    except Exception as e:
        return jsonify(success=False, message=f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ FileStorage
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    filename = f"ai_{timestamp}.jpg"
    file_obj = convert_b64_to_filestorage(b64_string, filename)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    files_list = {"ai_file": file_obj}
    result = save_to_base_modules(
        target_module=table_name,       # –∏–º—è –º–æ–¥—É–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä journals
        command_type="update",          # –∏–ª–∏ update/create
        message_info={'id': record_id},
        files_list=files_list
    )
    # current_app.logger.info(f"AI image generation and upload result: {result}")
    if 'params' not in result:
        return jsonify(success=False, message="–ù–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    record = result['params']
    columns = list(record.keys())

    # current_app.logger.info(f"--------------------------------")
    # current_app.logger.info(f"AI image generation and upload columns: {columns}")
    # current_app.logger.info(f"AI image generation and upload columns_names: {columns_names}")
    # current_app.logger.info(f"AI image generation and upload record: {record}")
    blocks = build_blocks_from_records([record], columns, columns_names)
    # current_app.logger.info(f"AI image generation and upload blocks: {blocks}")
    # current_app.logger.info(f"--------------------------------")

    current_app.logger.info(f"AI image generation and upload success")
    return jsonify(success=True, blocks=blocks)
