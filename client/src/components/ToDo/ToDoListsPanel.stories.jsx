import React, { useState } from 'react';
import { DndProvider } from 'react-dnd';
import { MultiBackend, getBackendOptions } from '@minoru/react-dnd-treeview';
import ListsTreeAnimated from './ListsTree/ListsTreeAnimated';
import ToDoListsPanel from './ToDoListsPanel';
import { Provider } from 'react-redux';
import { configureStore, createSlice } from '@reduxjs/toolkit';
import { apiSlice } from '../../store/api/apiSlice';
import { handlers } from '../../stories/msw-handlers';
import { mockTreeData, treeUtils } from './ListsTree/mockData';

// Mock auth slice
const authSlice = createSlice({
  name: 'auth',
  initialState: { isAuthenticated: true, user: { id: 1 } }, // Mock user as authenticated
  reducers: {},
});

// Mock lists slice
const listsSlice = createSlice({
  name: 'lists',
  initialState: {
    lists: {},
    selectedListId: 2,
  },
  reducers: {
    setSelectedListId: (state, action) => {
      state.selectedListId = action.payload;
    },
  },
});

// Mock todoLayout slice
const todoLayoutSlice = createSlice({
  name: 'todoLayout',
  initialState: {
    selectedListId: null,
  },
  reducers: {
    setSelectedListId: (state, action) => {
      state.selectedListId = action.payload;
    },
  },
});

export default {
  title: 'Components/ToDoListsPanel',
  component: ToDoListsPanel,
  parameters: {
    docs: {
      description: {
        component: `
### –ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è:
- üìÑ **–°–ø–∏—Å–æ–∫** ‚Üí –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã
- üèó **–ü—Ä–æ–µ–∫—Ç** ‚Üí –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
- üìÅ **–ì—Ä—É–ø–ø–∞** ‚Üí –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç—ã –∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏  
- üìå **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π** ‚Üí –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å

### –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:
- –î–µ—Å–∫—Ç–æ–ø: HTML5 drag & drop
- –ú–æ–±–∏–ª—å–Ω—ã–µ: Touch drag & drop
        `
      }
    }
  },
  decorators: [
    (story) => {
      const store = configureStore({
        reducer: {
          [apiSlice.reducerPath]: apiSlice.reducer,
          auth: authSlice.reducer, // Add auth reducer
          lists: listsSlice.reducer,
          todoLayout: todoLayoutSlice.reducer,
        },
        middleware: (getDefaultMiddleware) =>
          getDefaultMiddleware().concat(apiSlice.middleware),
      });
      return <Provider store={store}>{story()}</Provider>;
    },
  ],
};

const Template = (args) => {
  const [mockData, setMockData] = useState(null);
  
  // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleOptimisticDrop = (sectionIndex, newTree, options) => {
    console.log('Optimistic drop:', { sectionIndex, newTree, options });
    
    if (mockData) {
      const updatedData = [...mockData];
      updatedData[sectionIndex] = newTree;
      setMockData(updatedData);
    }
  };
  
  return (
    <div>
      <ToDoListsPanel {...args} />
      {mockData && (
        <div style={{ marginTop: 20, padding: 10, background: '#f0f0f0' }}>
          <h4>–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</h4>
          <pre>{JSON.stringify(mockData, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};

export const Default = Template.bind({});
Default.args = {
  mobile: false
};
Default.parameters = {
  msw: {
    handlers: [handlers.withData],
  },
};
Default.storyName = '–î–µ—Å–∫—Ç–æ–ø –≤–µ—Ä—Å–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏';

export const Mobile = Template.bind({});
Mobile.args = {
  mobile: true
};
Mobile.parameters = {
  msw: {
    handlers: [handlers.withData],
  },
  viewport: {
    defaultViewport: 'mobile1',
  },
};
Mobile.storyName = '–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ç–µ—Å—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è)';

export const NoData = Template.bind({});
NoData.parameters = {
  msw: {
    handlers: [handlers.noData],
  },
};
NoData.storyName = '–ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö';

export const WithRealData = Template.bind({});
WithRealData.parameters = {
  msw: {
    disable: true,
  },
};
WithRealData.storyName = '–° —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (API)';

export const DragDropTestMenu = () => {
  const [treeData, setTreeData] = useState(mockTreeData);
  
  const handleDrop = (sectionIndex) => (newTree, options) => {
    console.log('–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ (–º–µ–Ω—é):', { sectionIndex, newTree, options });
    
    const { dragSource, dropTarget, action } = options;
    
    if (!dragSource) {
      // –û–±—ã—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏
      const updatedData = [...treeData];
      updatedData[sectionIndex] = newTree;
      setTreeData(updatedData);
      return;
    }
    
    if (action === 'sort') {
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏
      const sourceIndex = treeData[sectionIndex].findIndex(n => n.id === dragSource.id);
      const targetIndex = newTree.findIndex(n => n.id === dragSource.id);
      
      if (sourceIndex !== -1 && targetIndex !== -1) {
        const updatedData = treeUtils.sortInSection(treeData, sectionIndex, dragSource.id, targetIndex);
        setTreeData(updatedData);
      }
    } else {
      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–ª–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
      const updatedData = treeUtils.moveNode(treeData, dragSource.id, dropTarget?.id || 0, action || 'move');
      setTreeData(updatedData);
    }
  };
  
  return (
    <DndProvider backend={MultiBackend} options={getBackendOptions()}>
      <div>
        <p>–ü—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤ –≥—Ä—É–ø–ø—É/–ø—Ä–æ–µ–∫—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è</p>
        <div style={{ display: 'flex', gap: 20 }}>
          {treeData.map((section, index) => (
            <div key={index} style={{ border: '1px solid #ccc', padding: 10, minWidth: 200 }}>
              <h4>–°–µ–∫—Ü–∏—è {index + 1}</h4>
              <ListsTreeAnimated
                treeData={section}
                onDrop={handleDrop(index)}
                dropMode="menu"
              />
            </div>
          ))}
        </div>
      </div>
    </DndProvider>
  );
};
DragDropTestMenu.storyName = '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ drop';

export const DragDropTestZones = () => {
  const [treeData, setTreeData] = useState(mockTreeData);
  
  const handleDrop = (sectionIndex) => (newTree, options) => {
    console.log('–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ (–∑–æ–Ω—ã):', { sectionIndex, newTree, options });
    
    const { dragSource, dropTarget, action } = options;
    
    if (!dragSource) {
      const updatedData = [...treeData];
      updatedData[sectionIndex] = newTree;
      setTreeData(updatedData);
      return;
    }
    
    if (action === 'sort') {
      const sourceIndex = treeData[sectionIndex].findIndex(n => n.id === dragSource.id);
      const targetIndex = newTree.findIndex(n => n.id === dragSource.id);
      
      if (sourceIndex !== -1 && targetIndex !== -1) {
        const updatedData = treeUtils.sortInSection(treeData, sectionIndex, dragSource.id, targetIndex);
        setTreeData(updatedData);
      }
    } else {
      const updatedData = treeUtils.moveNode(treeData, dragSource.id, dropTarget?.id || 0, action || 'move');
      setTreeData(updatedData);
    }
  };
  
  return (
    <DndProvider backend={MultiBackend} options={getBackendOptions()}>
      <div>
        <p>–ü—Ä–∏ hover –Ω–∞ –≥—Ä—É–ø–ø—ã/–ø—Ä–æ–µ–∫—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –∑–æ–Ω—ã: –ª–µ–≤–∞—è (—Å–≤—è–∑–∞—Ç—å) –∏ –ø—Ä–∞–≤–∞—è (–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å)</p>
        <div style={{ display: 'flex', gap: 20 }}>
          {treeData.map((section, index) => (
            <div key={index} style={{ border: '1px solid #ccc', padding: 10, minWidth: 200 }}>
              <h4>–°–µ–∫—Ü–∏—è {index + 1}</h4>
              <ListsTreeAnimated
                treeData={section}
                onDrop={handleDrop(index)}
                dropMode="zones"
              />
            </div>
          ))}
        </div>
      </div>
    </DndProvider>
  );
};
DragDropTestZones.storyName = '–ó–æ–Ω—ã drop –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è';

export const FullFunctionalTest = () => {
  const [treeData, setTreeData] = useState(mockTreeData);
  const [selectedId, setSelectedId] = useState(null);
  
  const handleDrop = (sectionIndex) => (newTree, options) => {
    console.log('–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç:', { sectionIndex, newTree, options });
    
    const { dragSource, dropTarget, action, dropTargetId } = options;
    
    if (!dragSource) {
      // –û–±—ã—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏
      const updatedData = [...treeData];
      updatedData[sectionIndex] = newTree;
      setTreeData(updatedData);
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    const isSorting = !dropTarget && dropTargetId === 0;
    const isMovingToContainer = dropTarget && dropTarget.droppable;
    
    if (action) {
      // –ï—Å–ª–∏ action —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω (—á–µ—Ä–µ–∑ –º–µ–Ω—é)
      if (action === 'sort') {
        const sourceIndex = treeData[sectionIndex].findIndex(n => n.id === dragSource.id);
        const targetIndex = newTree.findIndex(n => n.id === dragSource.id);
        
        if (sourceIndex !== -1 && targetIndex !== -1 && sourceIndex !== targetIndex) {
          const updatedData = treeUtils.sortInSection(treeData, sectionIndex, dragSource.id, targetIndex);
          setTreeData(updatedData);
        }
      } else {
        const updatedData = treeUtils.moveNode(treeData, dragSource.id, dropTarget?.id || 0, action);
        setTreeData(updatedData);
      }
    } else if (isSorting) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sourceIndex = treeData[sectionIndex].findIndex(n => n.id === dragSource.id);
      const targetIndex = newTree.findIndex(n => n.id === dragSource.id);
      
      if (sourceIndex !== -1 && targetIndex !== -1 && sourceIndex !== targetIndex) {
        const updatedData = treeUtils.sortInSection(treeData, sectionIndex, dragSource.id, targetIndex);
        setTreeData(updatedData);
      }
    } else if (isMovingToContainer) {
      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —á–µ—Ä–µ–∑ dropMode
      // –ú–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç ListsTreeAnimated
      return;
    } else {
      // –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
      const updatedData = treeUtils.moveNode(treeData, dragSource.id, dropTarget?.id || 0, 'move');
      setTreeData(updatedData);
    }
  };
  
  const handleRename = (id, newTitle) => {
    console.log('–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:', id, newTitle);
    const updatedData = treeData.map(section => 
      section.map(node => 
        node.id === id ? { ...node, text: newTitle } : node
      )
    );
    setTreeData(updatedData);
  };
  
  return (
    <DndProvider backend={MultiBackend} options={getBackendOptions()}>
      <div>
        <h3>–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è</h3>
        <div style={{ marginBottom: 20 }}>
          <h4>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
          <ul>
            <li>‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ —Å–µ–∫—Ü–∏—è—Ö</li>
            <li>‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏</li>
            <li>‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã</li>
            <li>‚úÖ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ (–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)</li>
            <li>‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫)</li>
            <li>‚úÖ –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤</li>
          </ul>
        </div>
        
        <div style={{ display: 'flex', gap: 20, flexWrap: 'wrap' }}>
          {treeData.map((section, index) => (
            <div key={index} style={{ 
              border: '2px solid #ddd', 
              borderRadius: 8,
              padding: 15, 
              minWidth: 250,
              backgroundColor: '#fafafa'
            }}>
              <h4 style={{ margin: '0 0 10px 0', color: '#333' }}>
                {index === 0 ? 'üìå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ' : 
                 index === 1 ? 'üè¢ –ü—Ä–æ–µ–∫—Ç—ã' : 
                 'üìÅ –°–ø–∏—Å–∫–∏ –∏ –≥—Ä—É–ø–ø—ã'}
              </h4>
              <ListsTreeAnimated
                treeData={section}
                selectedId={selectedId}
                onSelect={setSelectedId}
                onDrop={handleDrop(index)}
                onRename={handleRename}
                dropMode="menu"
              />
            </div>
          ))}
        </div>
        
        {selectedId && (
          <div style={{ 
            marginTop: 20, 
            padding: 15, 
            backgroundColor: '#e3f2fd', 
            borderRadius: 8,
            border: '1px solid #2196f3'
          }}>
            <strong>–í—ã–±—Ä–∞–Ω–æ:</strong> {selectedId}
          </div>
        )}
      </div>
    </DndProvider>
  );
};
FullFunctionalTest.storyName = 'üöÄ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç';