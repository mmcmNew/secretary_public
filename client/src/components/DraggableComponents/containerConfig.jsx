// containerConfig.js
import Timer from "../Timer/Timer";
import Metronome from "../Metronome";
import ChatAccordion from "../ChatAccordion";
// import ToDo from "../ToDo";
import MemoryComponent from "../Memory/Memory";
import TimersToolbar from "../Timer/TimersToolbar";
import ScenarioComponent from "../Scenario";
import SecretaryGIF from "../SecretaryGIF";
import Chat from "../Chat";
// import ToDoLayoutMobile from "../ToDo/ToDoLayoutMobile";
import JournalEditorDrawer from "../JournalEditor/JournalEditorDrawer";
import FocusModeComponent from "../Antischedule/FocusMode";
import CalendarLayout from "../Calendar/CalendarLayout";
import AntiScheduleWithContext from "../Antischedule/AntiScheduleWithContext";
// import ToDoLayoutTree from "../ToDo/ToDoLayoutTest";
// import ToDoLayout from "../ToDo/ToDoLayout";
import ToDoLayoutUniversal from "../ToDo/ToDoLayoutUniversal";
// import Calendar from "../Calendar/Calendar";

export const containerTypes = {
    timer: {
        type: "timer",
        name: "Timer",
        position: { x: 0, y: 0 },
        size: { width: 354, height: 244 },
        isLockAspectRatio: false,
        isResizable: false,
        isDisableDragging: false,
        isLocked: false,
        isMinimized: false,
        content: <Timer />,
    },
    timersToolbar: {
        type: "timersToolbar",
        name: "timersToolbar",
        position: { x: 1540, y: 0 },
        size: { width: 360, height: 900 },
        isLockAspectRatio: false,
        isResizable: false,
        isDisableDragging: false,
        isLocked: false,
        isMinimized: false,
        content: <TimersToolbar />,
    },
    metronome: {
        type: "metronome",
        name: "Metronome",
        position: { x: 500, y: 0 },
        size: { width: 277, height: 320 },
        isLockAspectRatio: false,
        isResizable: true,
        isDisableDragging: false,
        isMinimized: false,
        isLocked: false,
        content: <Metronome />,
    },
    chatCollapsed: {
        type: "chatCollapsed",
        name: "Chat",
        position: { x: 0, y: 600 },
        size: { width: 400, height: 130 },
        maxSize: { width: 600, height: 130 },
        minSize: { width: 300, height: 130 },
        isLockAspectRatio: false,
        isResizable: false,
        isDisableDragging: false,
        isMinimized: false,
        isLocked: false,
        content: <ChatAccordion />,
    },
    chat: {
        type: "chat",
        name: "Chat",
        position: { x: 0, y: 600 },
        size: { width: 400, height: 500 },
        minSize: { width: 300, height: 200 },
        isLockAspectRatio: false,
        isResizable: false,
        isDisableDragging: false,
        isMinimized: false,
        isLocked: false,
        content: <Chat />,
    },
    tasks: {
        type: "tasks",
        name: "ToDo",
        position: { x: 600, y: 100 },
        size: { width: 1400, height: 800 },
        minSize: { width: 1100, height: 700 },
        isLockAspectRatio: false,
        isResizable: true,
        isDisableDragging: false,
        isMinimized: false,
        isLocked: false,
        content: <ToDoLayoutUniversal />,

    },
    tasksMobile: {
        type: "tasksMobile",
        name: "ToDo",
        position: { x: 600, y: 100 },
        size: { width: 1400, height: 800 },
        minSize: { width: 1100, height: 700 },
        isLockAspectRatio: false,
        isResizable: true,
        isDisableDragging: false,
        isMinimized: false,
        isLocked: false,
        content: <ToDoLayoutUniversal />,
    },
    calendar: {
        type: "Calendar",
        name: "Calendar",
        position: { x: 400, y: 50 },
        size: { width: 800, height: 800 },
        minSize: { width: 1100, height: 700 },
        isLockAspectRatio: false,
        isResizable: true,
        isDisableDragging: false,
        isMinimized: false,
        isLocked: false,
        content: <CalendarLayout/>,
    },
    memory: {
        type: "Memory",
        name: "Memory",
        position: { x: 400, y: 50 },
        size: { width: 615, height: 865 },
        minSize: { width: 615, height: 865 },
        isLockAspectRatio: false,
        isResizable: true,
        isDisableDragging: false,
        isMinimized: false,
        isLocked: false,
        content: <MemoryComponent />,
    },
    Scenario: {
        type: "Scenario",
        name: "Scenario",
        position: { x: 800, y: 0 },
        size: { width: 380, height: 600 },
        isLockAspectRatio: false,
        isResizable: true,
        isDisableDragging: false,
        isLocked: false,
        isMinimized: false,
        content: <ScenarioComponent />,
    },
    SecretaryGIF: {
        type: "SecretaryGIF",
        name: "SecretaryGIF",
        position: { x: 0, y: 0 },
        size: { width: 240, height: 290 },
        isLockAspectRatio: false,
        isResizable: false,
        isDisableDragging: false,
        isLocked: false,
        isMinimized: false,
        content: <SecretaryGIF />,
    },
    JournalEditorDrawer: {
        type: "JournalEditorDrawer",
        name: "JournalEditor",
        position: { x: 320, y: 200 },
        size: { width: 1400, height: 830 },
        isLockAspectRatio: false,
        isResizable: true,
        isDisableDragging: false,
        isLocked: false,
        isMinimized: false,
        content: <JournalEditorDrawer />,
    },
    FocusMode: {
        type: "FocusMode",
        name: "FocusMode",
        position: { x: 0, y: 0 },
        size: { width: 520, height: 800 },
        minSize: { width: 450, height: 500 },
        isLockAspectRatio: false,
        isResizable: true,
        isDisableDragging: false,
        isLocked: false,
        isMinimized: false,
        content: <FocusModeComponent />,
    },
    AntiSchedule: {
        type: "AntiSchedule",
        name: "AntiSchedule",
        position: { x: 0, y: 0 },
        size: { width: 540, height: 800 },
        minSize: { width: 500, height: 500 },
        isLockAspectRatio: false,
        isResizable: true,
        isDisableDragging: false,
        isLocked: false,
        isMinimized: false,
        content: <AntiScheduleWithContext />,
    },
};
